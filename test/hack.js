const { time, loadFixture } = require("@nomicfoundation/hardhat-network-helpers");
const { anyValue } = require("@nomicfoundation/hardhat-chai-matchers/withArgs");
const { expect } = require("chai");
const { ethers } = require("hardhat");
const { parseUnits } = require("ethers/lib/utils");

describe("Hack Contract", function () {
    const amount = parseUnits("20", 18);
    const gasFee = parseUnits("1", 17);
    let swapper;
    before(async () => {
        [owner, hacker, addr2, ...addrs] = await ethers.getSigners();
        const Swapper = await ethers.getContractFactory("NFTSwaper");
        swapper = await Swapper.deploy();
    });

    it("sned some token to contract", async () => {
        await owner.sendTransaction({
            to: swapper.address,
            value: amount,
        });

        expect(await ethers.provider.getBalance(swapper.address)).to.eq(amount);
    });

    it("should withdraw", async () => {
        await swapper.withdraw();
        expect(await ethers.provider.getBalance(swapper.address)).to.eq(0);
    });

    it("Ready to Hack", async () => {
        // send ether to contract
        await owner.sendTransaction({
            to: swapper.address,
            value: amount,
        });

        expect(await ethers.provider.getBalance(swapper.address)).to.eq(amount);

        // create acctack contract
        const Attack = await ethers.getContractFactory("Attack");
        attack = await Attack.connect(hacker).deploy(swapper.address);

        // attack
        const beforeBalance = await ethers.provider.getBalance(hacker.address);
        await attack.connect(hacker).attack();
        expect(await ethers.provider.getBalance(hacker.address)).gt(beforeBalance.add(amount).sub(gasFee));
    });
});
